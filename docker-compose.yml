version: "3.7"

services:
  rabbitmq:
    build: ./docker/rabbitmq
    hostname: "rabbitmq"
    labels:
      com.naval-base.description: "RabbitMQ Broker"
    environment:
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "admin"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    expose:
      - "4369"
      - "5671"
      - "5672"
      - "25672"
      - "15671"
      - "15672"
    ports:
    #   - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmqctl", "node_health_check"]
      interval: 60s
      timeout: 5s

  postgres:
    image: postgres:12-alpine
    labels:
      com.naval-base.description: "PostgreSQL"
    environment:
      POSTGRES_USER: "yukikaze"
      POSTGRES_PASSWORD: "admin"
      POSTGRES_DB: "yukikaze"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    expose:
      - "5432"
    ports:
      - "127.0.0.1:5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yukikaze"]
      interval: 10s
      timeout: 5s

  postgres-exporter:
    image: wrouesnel/postgres_exporter:latest
    labels:
      com.naval-base.description: "PostgreSQL Exporter"
    environment:
      DATA_SOURCE_NAME: "postgresql://yukikaze:admin@postgres:5432/yukikaze?sslmode=disable"
    expose:
      - "9187"
    restart: unless-stopped

  hasura:
    image: hasura/graphql-engine:v1.2.0-beta.3
    labels:
      com.naval-base.description: "Hasura GraphQL Engine"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: "postgresql://yukikaze:admin@postgres:5432/yukikaze"
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: "startup, http-log, webhook-log, websocket-log, query-log"
      HASURA_GRAPHQL_ADMIN_SECRET: "admin"
    expose:
      - "8080"
    ports:
      - "127.0.0.1:8080:8080"
    restart: unless-stopped

  redis:
    image: redis:5-alpine
    labels:
      com.naval-base.description: "Redis"
    volumes:
      - redis-data:/data
    expose:
      - "6379"
    # ports:
    #   - "127.0.0.1:6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s

  redis-exporter:
    image: oliver006/redis_exporter:alpine
    labels:
      com.naval-base.description: "Redis Exporter"
    environment:
      REDIS_ADDR: "redis://redis:6379"
    expose:
      - "9121"
    restart: unless-stopped

  prometheus:
    build: ./docker/prometheus
    labels:
      com.naval-base.description: "Prometheus"
    volumes:
      - prometheus-data:/prometheus
    expose:
      - "9090"
    ports:
      - "127.0.0.1:9090:9090"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s

  grafana:
    build: ./docker/grafana
    labels:
      com.naval-base.description: "Grafana"
    environment:
      GF_DEFAULT_INSTANCE_NAME: "yukikaze"
      # GF_SERVER_DOMAIN: ""
      # GF_SERVER_ROOT_URL: ""
      GF_SECURITY_ADMIN_USER: "admin"
      GF_SECURITY_ADMIN_PASSWORD: "admin"
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      # GF_AUTH_ANONYMOUS_ORG_NAME: ""
      # GF_AUTH_GITHUB_ENABLED: ""
      # GF_AUTH_GITHUB_ALLOW_SIGN_UP: ""
      # GF_AUTH_GITHUB_CLIENT_ID: ""
      # GF_AUTH_GITHUB_CLIENT_SECRET: ""
      # GF_AUTH_GITHUB_SCOPES: user:email,read:org
      # GF_AUTH_GITHUB_AUTH_URL: https://github.com/login/oauth/authorize
      # GF_AUTH_GITHUB_TOKEN_URL: https://github.com/login/oauth/access_token
      # GF_AUTH_GITHUB_API_URL: https://api.github.com/user
      # GF_AUTH_GITHUB_ALLOWED_ORGANIZATIONS: ""
      GF_ANALYTICS_REPORTING_ENABLED: "false"
      GF_INSTALL_PLUGINS: "flant-statusmap-panel,grafana-piechart-panel"
    volumes:
      - grafana-data:/var/lib/grafana
    expose:
      - "3000"
    ports:
      - "127.0.0.1:3000:3000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- localhost:3000/api/health"]
      interval: 30s
      timeout: 5s

  gateway:
    image: spectacles/gateway:latest
    labels:
      com.naval-base.description: "Gateway Ingress"
    environment:
      DISCORD_TOKEN: "NjE4OTg3OTAzMjg0MDE5MjQx.Xo5WWA.YjeFV1yy0K5PNbus8Cu5MMaPLzg"
      DISCORD_EVENTS: "READY,MESSAGE_CREATE,GUILD_CREATE,PRESENCE_UPDATE"
      BROKER_TYPE: "amqp"
      BROKER_URL: "amqp://admin:admin@rabbitmq"
      BROKER_GROUP: "gateway"
      BROKER_MESSAGE_TIMEOUT: "10m"
      PROMETHEUS_ADDRESS: ":8080"
      PROMETHEUS_ENDPOINT: "/metrics"
    expose:
      - "8080"
    restart: unless-stopped

  api:
    build: packages/api
    labels:
      com.naval-base.description: "Internal REST API"
    environment:
      PGHOST: "postgres"
      PGPORT: "5432"
      PGDATABASE: "yukikaze"
      PGUSERNAME: "yukikaze"
      PGPASSWORD: "admin"
      DISCORD_TOKEN: "NjE4OTg3OTAzMjg0MDE5MjQx.Xo5WWA.YjeFV1yy0K5PNbus8Cu5MMaPLzg"
    expose:
      - "3000"
    ports:
      - "127.0.0.1:3001:3000"
    restart: unless-stopped

volumes:
  rabbitmq-data:
    name: "rabbitmq-data"
  postgres-data:
    name: "postgres-data"
  redis-data:
    name: "redis-data"
  prometheus-data:
    name: "prometheus-data"
  grafana-data:
    name: "grafana-data"
